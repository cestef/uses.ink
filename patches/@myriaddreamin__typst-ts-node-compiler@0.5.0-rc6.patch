diff --git a/index.js b/index.js
index 78215e5fec9dbb2746e5a8c3f51ec65d977f9216..98400301e8c73d6d5b6e0d8f81a30234ceadc879 100644
--- a/index.js
+++ b/index.js
@@ -2,7 +2,7 @@
 /* eslint-disable */
 /* auto-generated by NAPI-RS */
 
-const { readFileSync } = require('fs')
+const { readFileSync } = __non_webpack_require__('fs')
 
 let nativeBinding = null;
 const loadErrors = [];
@@ -49,7 +49,7 @@ const isMuslFromReport = () => {
 
 const isMuslFromChildProcess = () => {
   try {
-    return require('child_process')
+    return __non_webpack_require__('child_process')
       .execSync('ldd --version', { encoding: 'utf8' })
       .includes('musl');
   } catch (e) {
@@ -62,23 +62,23 @@ function requireNative() {
   if (process.platform === 'android') {
     if (process.arch === 'arm64') {
       try {
-        return require('./typst-ts-node-compiler.android-arm64.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.android-arm64.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-android-arm64');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-android-arm64');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'arm') {
       try {
-        return require('./typst-ts-node-compiler.android-arm-eabi.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.android-arm-eabi.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-android-arm-eabi');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-android-arm-eabi');
       } catch (e) {
         loadErrors.push(e);
       }
@@ -88,34 +88,34 @@ function requireNative() {
   } else if (process.platform === 'win32') {
     if (process.arch === 'x64') {
       try {
-        return require('./typst-ts-node-compiler.win32-x64-msvc.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.win32-x64-msvc.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-win32-x64-msvc');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-win32-x64-msvc');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'ia32') {
       try {
-        return require('./typst-ts-node-compiler.win32-ia32-msvc.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.win32-ia32-msvc.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-win32-ia32-msvc');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-win32-ia32-msvc');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'arm64') {
       try {
-        return require('./typst-ts-node-compiler.win32-arm64-msvc.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.win32-arm64-msvc.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-win32-arm64-msvc');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-win32-arm64-msvc');
       } catch (e) {
         loadErrors.push(e);
       }
@@ -124,35 +124,35 @@ function requireNative() {
     }
   } else if (process.platform === 'darwin') {
     try {
-      return require('./typst-ts-node-compiler.darwin-universal.node');
+      return __non_webpack_require__('./typst-ts-node-compiler.darwin-universal.node');
     } catch (e) {
       loadErrors.push(e);
     }
     try {
-      return require('@myriaddreamin/typst-ts-node-compiler-darwin-universal');
+      return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-darwin-universal');
     } catch (e) {
       loadErrors.push(e);
     }
 
     if (process.arch === 'x64') {
       try {
-        return require('./typst-ts-node-compiler.darwin-x64.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.darwin-x64.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-darwin-x64');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-darwin-x64');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'arm64') {
       try {
-        return require('./typst-ts-node-compiler.darwin-arm64.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.darwin-arm64.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-darwin-arm64');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-darwin-arm64');
       } catch (e) {
         loadErrors.push(e);
       }
@@ -162,23 +162,23 @@ function requireNative() {
   } else if (process.platform === 'freebsd') {
     if (process.arch === 'x64') {
       try {
-        return require('./typst-ts-node-compiler.freebsd-x64.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.freebsd-x64.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-freebsd-x64');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-freebsd-x64');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'arm64') {
       try {
-        return require('./typst-ts-node-compiler.freebsd-arm64.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.freebsd-arm64.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-freebsd-arm64');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-freebsd-arm64');
       } catch (e) {
         loadErrors.push(e);
       }
@@ -189,23 +189,23 @@ function requireNative() {
     if (process.arch === 'x64') {
       if (isMusl()) {
         try {
-          return require('./typst-ts-node-compiler.linux-x64-musl.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-x64-musl.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-x64-musl');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-x64-musl');
         } catch (e) {
           loadErrors.push(e);
         }
       } else {
         try {
-          return require('./typst-ts-node-compiler.linux-x64-gnu.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-x64-gnu.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-x64-gnu');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-x64-gnu');
         } catch (e) {
           loadErrors.push(e);
         }
@@ -213,70 +213,70 @@ function requireNative() {
     } else if (process.arch === 'arm64') {
       if (isMusl()) {
         try {
-          return require('./typst-ts-node-compiler.linux-arm64-musl.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-arm64-musl.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-arm64-musl');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-arm64-musl');
         } catch (e) {
           loadErrors.push(e);
         }
       } else {
         try {
-          return require('./typst-ts-node-compiler.linux-arm64-gnu.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-arm64-gnu.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-arm64-gnu');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-arm64-gnu');
         } catch (e) {
           loadErrors.push(e);
         }
       }
     } else if (process.arch === 'arm') {
       try {
-        return require('./typst-ts-node-compiler.linux-arm-gnueabihf.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.linux-arm-gnueabihf.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-linux-arm-gnueabihf');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-arm-gnueabihf');
       } catch (e) {
         loadErrors.push(e);
       }
     } else if (process.arch === 'riscv64') {
       if (isMusl()) {
         try {
-          return require('./typst-ts-node-compiler.linux-riscv64-musl.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-riscv64-musl.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-riscv64-musl');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-riscv64-musl');
         } catch (e) {
           loadErrors.push(e);
         }
       } else {
         try {
-          return require('./typst-ts-node-compiler.linux-riscv64-gnu.node');
+          return __non_webpack_require__('./typst-ts-node-compiler.linux-riscv64-gnu.node');
         } catch (e) {
           loadErrors.push(e);
         }
         try {
-          return require('@myriaddreamin/typst-ts-node-compiler-linux-riscv64-gnu');
+          return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-riscv64-gnu');
         } catch (e) {
           loadErrors.push(e);
         }
       }
     } else if (process.arch === 's390x') {
       try {
-        return require('./typst-ts-node-compiler.linux-s390x-gnu.node');
+        return __non_webpack_require__('./typst-ts-node-compiler.linux-s390x-gnu.node');
       } catch (e) {
         loadErrors.push(e);
       }
       try {
-        return require('@myriaddreamin/typst-ts-node-compiler-linux-s390x-gnu');
+        return __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-linux-s390x-gnu');
       } catch (e) {
         loadErrors.push(e);
       }
@@ -294,7 +294,7 @@ nativeBinding = requireNative();
 
 if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
   try {
-    nativeBinding = require('./typst-ts-node-compiler.wasi.cjs');
+    nativeBinding = __non_webpack_require__('./typst-ts-node-compiler.wasi.cjs');
   } catch (err) {
     if (process.env.NAPI_RS_FORCE_WASI) {
       console.error(err);
@@ -302,7 +302,7 @@ if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
   }
   if (!nativeBinding) {
     try {
-      nativeBinding = require('@myriaddreamin/typst-ts-node-compiler-wasm32-wasi');
+      nativeBinding = __non_webpack_require__('@myriaddreamin/typst-ts-node-compiler-wasm32-wasi');
     } catch (err) {
       if (process.env.NAPI_RS_FORCE_WASI) {
         console.error(err);
